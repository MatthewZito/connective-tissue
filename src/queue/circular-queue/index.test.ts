import { CircularQueue } from '.'

describe('circular queue', () => {
  it('tracks the length', () => {
    const q = new CircularQueue(10)

    q.enqueue(12)
    q.enqueue(1)
    q.enqueue(2)
    expect(q.length).toEqual(3)

    q.enqueue(12)
    q.dequeue()
    q.enqueue(2)
    expect(q.length).toEqual(4)

    q.dequeue()
    q.dequeue()
    q.dequeue()
    expect(q.length).toEqual(1)
  })

  it('enforces the capacity', () => {
    const q = new CircularQueue(3)

    expect(q.isEmpty()).toEqual(true)
    expect(q.isFull()).toEqual(false)
    expect(q.enqueue(1)).toEqual(true)
    expect(q.enqueue(2)).toEqual(true)
    expect(q.enqueue(3)).toEqual(true)
    expect(q.enqueue(4)).toEqual(false)
    expect(q.isEmpty()).toEqual(false)
    expect(q.isFull()).toEqual(true)
    expect(q.dequeue()).toEqual(1)
    expect(q.enqueue(4)).toEqual(true)
    expect(q.dequeue()).toEqual(2)
    expect(q.dequeue()).toEqual(3)
    expect(q.dequeue()).toEqual(4)
    expect(q.dequeue()).toEqual(null)
  })

  it('tracks the head', () => {
    const q = new CircularQueue(5)
    q.enqueue(2)
    expect(q.front).toEqual(2)
    q.enqueue(3)
    expect(q.front).toEqual(2)
    q.enqueue(1)
    expect(q.front).toEqual(2)
    q.enqueue(5)
    expect(q.front).toEqual(2)
    q.enqueue(4)
    expect(q.front).toEqual(2)
    q.dequeue()
    expect(q.front).toEqual(3)
    q.dequeue()
    expect(q.front).toEqual(1)
    q.dequeue()
    expect(q.front).toEqual(5)
    q.dequeue()
    expect(q.front).toEqual(4)
  })

  it('tracks the tail', () => {
    const q = new CircularQueue(5)
    q.enqueue(2)
    expect(q.back).toEqual(2)
    q.enqueue(3)
    expect(q.back).toEqual(3)
    q.enqueue(1)
    expect(q.back).toEqual(1)
    q.enqueue(5)
    expect(q.back).toEqual(5)
    q.enqueue(4)
    expect(q.back).toEqual(4)
    q.dequeue()
    expect(q.back).toEqual(4)
    q.dequeue()
    expect(q.back).toEqual(4)
    q.dequeue()
    expect(q.back).toEqual(4)
    q.dequeue()
    expect(q.back).toEqual(4)
    q.dequeue()
    expect(q.back).toEqual(null)
  })
})
